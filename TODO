= Current stack

== Finish tensors

- instance SrN Monoidal...

- Propagate instances for Sr2:

  - Either move monadic (nested product) combinators to a subclass (refactoring
    headache with low apparent value right now), or shove 'Sr2' into its own
    module as it is, because 'SrN' ought to do everything 'Sr2' can.


= Anytime dead code cleanup/maintenance

  - Cat.Orthotope

  - Cat.Unsized.Category.Free.Data - cleanup @foldMap@, @fixed@
  - Cat.Sized.Semigroupoid.Free.Data - cleanup @foldMap@
  - Cat.Sized.Category.Free.Data - cleanup @foldMap@
  - Cat.Sized.Monoidal.Free.Data - cleanup @foldMap@
  - Cat.Sized.Braided
  - Cat.Sized.Diagonal



= Foundations / high-value experiments

1. Sort out what the relevant constraints on foldMap should be by comparing
 - Cat.Unsized.Semigroupoid.Free.Data
 - Cat.Unsized.Category.Free.Data

2. Bimonoidal
 - Revisit Cat.Sized.Circuit with Cat.Sized.Cartesian.Free
   - Could you actually use Codiagonal ± Semicocartesian methods?
 - DistributiveLR instances
   - R1/VS.Vector
 - Maaaaybe Free Semiadditive (unless in the course of writing it you discover
   Free Additive would be a better use of time?)

3. Sketch a profunctor-based typeclass hierarchy in a new branch when your
   examples include biproducts and enough of the basic functionality with
   biproducts (e.g. recursion schemes) seems to be working.

4. Feature integration / testing:
  - Boolean circuits as tensors over a semiring
    - Consider a numhask reimplementation
  - Recursion scheme over circuits/products of constant boolean morphisms for
    normal forms?
    - Do you need/want different types (and perhaps a different,
      not-just-an-example module) for this?
  - Incremental computation ± traces?
  - Check refs to see what you need to take a beeline to encoding SAT problems
    - Boolean relations
    - ((Self-dual?) compact) closed categories (/dagger categories?)
    - Traces
  - Zusatz: ersatz terms as a DSL.


= Maintenance that might pay dividends

- Refactor: Because of module coupling (currently manifesting with instance
  derivations and obnoxious constraints), move '{Unsized/Sized}.HFunctor' into
  a module separate from '_.Functor'.
    - Expected payoff might increase with the volume/complexity of future code
      that depends on recursion schemes.




= Low priority

- comonad instances for R1 and VS.Vector/TODO stubs
  - non-empty leftmost/rightmost/center comonad for rank ≥ 1 — all defined by a lens that points to a *location* independent of contents
  — instance for any functor over a monoid
  — "search"/"selection" that points to a first/last value satisfying a predicate (or a default)?
  - pointer/finitary representable store comonad
  - tangent bundle/finitary discrete derivative comonad

== Infrastructure

- repository CI / fix cachix setup

- Multi-cradle project:
  - cat-herder
  - cat-herder-test
  - cat-herder-base
  - cat-herder-vector-sized
  - cat-herder-orthotope
